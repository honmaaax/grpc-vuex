/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.snakecase.GetSnakeReply', null, global);
goog.exportSymbol('proto.snakecase.GetSnakeRequest', null, global);
goog.exportSymbol('proto.snakecase.Pagenation', null, global);
goog.exportSymbol('proto.snakecase.Snake', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snakecase.Pagenation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snakecase.Pagenation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snakecase.Pagenation.displayName = 'proto.snakecase.Pagenation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snakecase.Pagenation.prototype.toObject = function(opt_includeInstance) {
  return proto.snakecase.Pagenation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snakecase.Pagenation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snakecase.Pagenation.toObject = function(includeInstance, msg) {
  var f, obj = {
    perPage: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageNum: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snakecase.Pagenation}
 */
proto.snakecase.Pagenation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snakecase.Pagenation;
  return proto.snakecase.Pagenation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snakecase.Pagenation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snakecase.Pagenation}
 */
proto.snakecase.Pagenation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPerPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snakecase.Pagenation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snakecase.Pagenation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snakecase.Pagenation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snakecase.Pagenation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPerPage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPageNum();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string per_page = 1;
 * @return {string}
 */
proto.snakecase.Pagenation.prototype.getPerPage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.snakecase.Pagenation.prototype.setPerPage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 page_num = 2;
 * @return {number}
 */
proto.snakecase.Pagenation.prototype.getPageNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.snakecase.Pagenation.prototype.setPageNum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snakecase.Snake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snakecase.Snake.repeatedFields_, null);
};
goog.inherits(proto.snakecase.Snake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snakecase.Snake.displayName = 'proto.snakecase.Snake';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snakecase.Snake.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snakecase.Snake.prototype.toObject = function(opt_includeInstance) {
  return proto.snakecase.Snake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snakecase.Snake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snakecase.Snake.toObject = function(includeInstance, msg) {
  var f, obj = {
    displayName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    myAge: jspb.Message.getFieldWithDefault(msg, 2, 0),
    childrenIdsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snakecase.Snake}
 */
proto.snakecase.Snake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snakecase.Snake;
  return proto.snakecase.Snake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snakecase.Snake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snakecase.Snake}
 */
proto.snakecase.Snake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMyAge(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addChildrenIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snakecase.Snake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snakecase.Snake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snakecase.Snake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snakecase.Snake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMyAge();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getChildrenIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string display_name = 1;
 * @return {string}
 */
proto.snakecase.Snake.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.snakecase.Snake.prototype.setDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 my_age = 2;
 * @return {number}
 */
proto.snakecase.Snake.prototype.getMyAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.snakecase.Snake.prototype.setMyAge = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string children_ids = 3;
 * @return {!Array<string>}
 */
proto.snakecase.Snake.prototype.getChildrenIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.snakecase.Snake.prototype.setChildrenIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.snakecase.Snake.prototype.addChildrenIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.snakecase.Snake.prototype.clearChildrenIdsList = function() {
  this.setChildrenIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snakecase.GetSnakeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snakecase.GetSnakeRequest.repeatedFields_, null);
};
goog.inherits(proto.snakecase.GetSnakeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snakecase.GetSnakeRequest.displayName = 'proto.snakecase.GetSnakeRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snakecase.GetSnakeRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snakecase.GetSnakeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.snakecase.GetSnakeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snakecase.GetSnakeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snakecase.GetSnakeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    snakesDataList: jspb.Message.toObjectList(msg.getSnakesDataList(),
    proto.snakecase.Snake.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pagenationCondition: (f = msg.getPagenationCondition()) && proto.snakecase.Pagenation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snakecase.GetSnakeRequest}
 */
proto.snakecase.GetSnakeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snakecase.GetSnakeRequest;
  return proto.snakecase.GetSnakeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snakecase.GetSnakeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snakecase.GetSnakeRequest}
 */
proto.snakecase.GetSnakeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snakecase.Snake;
      reader.readMessage(value,proto.snakecase.Snake.deserializeBinaryFromReader);
      msg.addSnakesData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    case 3:
      var value = new proto.snakecase.Pagenation;
      reader.readMessage(value,proto.snakecase.Pagenation.deserializeBinaryFromReader);
      msg.setPagenationCondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snakecase.GetSnakeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snakecase.GetSnakeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snakecase.GetSnakeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snakecase.GetSnakeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnakesDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snakecase.Snake.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPagenationCondition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.snakecase.Pagenation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Snake snakes_data = 1;
 * @return {!Array<!proto.snakecase.Snake>}
 */
proto.snakecase.GetSnakeRequest.prototype.getSnakesDataList = function() {
  return /** @type{!Array<!proto.snakecase.Snake>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snakecase.Snake, 1));
};


/** @param {!Array<!proto.snakecase.Snake>} value */
proto.snakecase.GetSnakeRequest.prototype.setSnakesDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snakecase.Snake=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snakecase.Snake}
 */
proto.snakecase.GetSnakeRequest.prototype.addSnakesData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snakecase.Snake, opt_index);
};


proto.snakecase.GetSnakeRequest.prototype.clearSnakesDataList = function() {
  this.setSnakesDataList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.snakecase.GetSnakeRequest.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.snakecase.GetSnakeRequest.prototype.setTotalCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Pagenation pagenation_condition = 3;
 * @return {?proto.snakecase.Pagenation}
 */
proto.snakecase.GetSnakeRequest.prototype.getPagenationCondition = function() {
  return /** @type{?proto.snakecase.Pagenation} */ (
    jspb.Message.getWrapperField(this, proto.snakecase.Pagenation, 3));
};


/** @param {?proto.snakecase.Pagenation|undefined} value */
proto.snakecase.GetSnakeRequest.prototype.setPagenationCondition = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.snakecase.GetSnakeRequest.prototype.clearPagenationCondition = function() {
  this.setPagenationCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.snakecase.GetSnakeRequest.prototype.hasPagenationCondition = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snakecase.GetSnakeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snakecase.GetSnakeReply.repeatedFields_, null);
};
goog.inherits(proto.snakecase.GetSnakeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snakecase.GetSnakeReply.displayName = 'proto.snakecase.GetSnakeReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snakecase.GetSnakeReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snakecase.GetSnakeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.snakecase.GetSnakeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snakecase.GetSnakeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snakecase.GetSnakeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    snakesDataList: jspb.Message.toObjectList(msg.getSnakesDataList(),
    proto.snakecase.Snake.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pagenationCondition: (f = msg.getPagenationCondition()) && proto.snakecase.Pagenation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snakecase.GetSnakeReply}
 */
proto.snakecase.GetSnakeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snakecase.GetSnakeReply;
  return proto.snakecase.GetSnakeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snakecase.GetSnakeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snakecase.GetSnakeReply}
 */
proto.snakecase.GetSnakeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snakecase.Snake;
      reader.readMessage(value,proto.snakecase.Snake.deserializeBinaryFromReader);
      msg.addSnakesData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    case 3:
      var value = new proto.snakecase.Pagenation;
      reader.readMessage(value,proto.snakecase.Pagenation.deserializeBinaryFromReader);
      msg.setPagenationCondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snakecase.GetSnakeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snakecase.GetSnakeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snakecase.GetSnakeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snakecase.GetSnakeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnakesDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snakecase.Snake.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPagenationCondition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.snakecase.Pagenation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Snake snakes_data = 1;
 * @return {!Array<!proto.snakecase.Snake>}
 */
proto.snakecase.GetSnakeReply.prototype.getSnakesDataList = function() {
  return /** @type{!Array<!proto.snakecase.Snake>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snakecase.Snake, 1));
};


/** @param {!Array<!proto.snakecase.Snake>} value */
proto.snakecase.GetSnakeReply.prototype.setSnakesDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snakecase.Snake=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snakecase.Snake}
 */
proto.snakecase.GetSnakeReply.prototype.addSnakesData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snakecase.Snake, opt_index);
};


proto.snakecase.GetSnakeReply.prototype.clearSnakesDataList = function() {
  this.setSnakesDataList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.snakecase.GetSnakeReply.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.snakecase.GetSnakeReply.prototype.setTotalCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Pagenation pagenation_condition = 3;
 * @return {?proto.snakecase.Pagenation}
 */
proto.snakecase.GetSnakeReply.prototype.getPagenationCondition = function() {
  return /** @type{?proto.snakecase.Pagenation} */ (
    jspb.Message.getWrapperField(this, proto.snakecase.Pagenation, 3));
};


/** @param {?proto.snakecase.Pagenation|undefined} value */
proto.snakecase.GetSnakeReply.prototype.setPagenationCondition = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.snakecase.GetSnakeReply.prototype.clearPagenationCondition = function() {
  this.setPagenationCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.snakecase.GetSnakeReply.prototype.hasPagenationCondition = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.snakecase);
