import fs from 'fs'
import path from 'path'
import Promise from 'bluebird'
import _ from 'lodash'

import {
  toJSON,
  getServices,
  getMessages,
  getModels,
  getMutationTypes,
  getActions,
} from '../src/protobuf'
import {
  generateImportCode,
  generateMutationTypesCode,
  generateInitGrpcCode,
  generateRequestCode,
  generateActionsCode,
  generateFileByProtoc,
  generateFileByProtocDependencies,
  generateCode,
  generateDtsCode,
} from '../src/generator'

const proto = `
  syntax = "proto3";

  package helloworld;

  service Greeter {
    rpc SayHello (HelloRequest) returns (HelloReply);
  }

  message User {
    string name = 1;
    int32 age = 2;
    repeated string children = 3;
  }

  message HelloRequest {
    repeated User users = 1;
  }

  message HelloReply {
    repeated User users = 1;
  }
`

describe('generateFileByProtoc', ()=>{
  beforeAll(()=>{
    return Promise.resolve()
      .then(()=>{
        const dirPath = '.grpc-vuex'
        if ( !fs.existsSync(dirPath) ) {
          return Promise.promisify(fs.mkdir)(dirPath)
        }
      })
      .then(()=>Promise.all([
        Promise.promisify(fs.stat)('./.grpc-vuex/helloworld_grpc_web_pb.js'),
        Promise.promisify(fs.stat)('./.grpc-vuex/helloworld_pb.js'),
        // Promise.promisify(fs.stat)('./.grpc-vuex/github.com/mwitkow/go-proto-validators/validator_pb.js'),
        // Promise.promisify(fs.stat)('./.grpc-vuex/google/api/annotations_pb.js'),
      ]))
      .then(()=>{
        return Promise.all([
          Promise.promisify(fs.unlink)('./.grpc-vuex/helloworld_grpc_web_pb.js'),
          Promise.promisify(fs.unlink)('./.grpc-vuex/helloworld_pb.js'),
          // Promise.promisify(fs.unlink)('./.grpc-vuex/github.com/mwitkow/go-proto-validators/validator_pb.js'),
          // Promise.promisify(fs.unlink)('./.grpc-vuex/google/api/annotations_pb.js'),
        ])
      }, ()=>{})
      .then(()=>generateFileByProtoc('./test/grpc/helloworld.proto'))
  })
  it('returns code generated by Protoc', ()=>{
    return Promise
      .all([
        Promise.promisify(fs.stat)('./.grpc-vuex/helloworld_grpc_web_pb.js'),
        Promise.promisify(fs.stat)('./.grpc-vuex/helloworld_pb.js'),
        // Promise.promisify(fs.stat)('./.grpc-vuex/github.com/mwitkow/go-proto-validators/validator_pb.js'),
        // Promise.promisify(fs.stat)('./.grpc-vuex/google/api/annotations_pb.js'),
      ])
      .then(()=>{
        expect(true).toBeTruthy()
      })
  })
})

describe('generateFileByProtocDependencies', ()=>{
  const protoFiles = [
    {
      "dir": "/Users/b07781/go/src",
      "file": "github.com/mwitkow/go-proto-validators/validator.proto"
    },
    {
      "dir": "/Users/b07781/go/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis",
      "file": "google/api/annotations.proto",
      "dependencies": [
        {
          "dir": "/Users/b07781/go/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis",
          "file": "google/api/http.proto"
        },
      ],
    }
  ]
  beforeAll(()=>{
    return Promise.resolve()
      .then(()=>{
        const dirPath = '.grpc-vuex'
        if ( !fs.existsSync(dirPath) ) {
          return Promise.promisify(fs.mkdir)(dirPath)
        }
      })
      .then(()=>Promise.all([
        Promise.promisify(fs.stat)('./.grpc-vuex/github.com/mwitkow/go-proto-validators/validator_pb.js'),
        Promise.promisify(fs.stat)('./.grpc-vuex/google/api/annotations_pb.js'),
        Promise.promisify(fs.stat)('./.grpc-vuex/google/api/google/api/http_pb.js'),
      ]))
      .then(()=>{
        return Promise.all([
          Promise.promisify(fs.unlink)('./.grpc-vuex/github.com/mwitkow/go-proto-validators/validator_pb.js'),
          Promise.promisify(fs.unlink)('./.grpc-vuex/google/api/annotations_pb.js'),
          Promise.promisify(fs.stat)('./.grpc-vuex/google/api/google/api/http_pb.js'),
        ])
      }, ()=>{})
      .then(()=>generateFileByProtocDependencies(protoFiles))
  })
  it('returns code generated by Protoc', ()=>{
    return Promise
      .all([
        Promise.promisify(fs.stat)('./.grpc-vuex/github.com/mwitkow/go-proto-validators/validator_pb.js'),
        Promise.promisify(fs.stat)('./.grpc-vuex/google/api/annotations_pb.js'),
        Promise.promisify(fs.stat)('./.grpc-vuex/google/api/google/api/http_pb.js'),
      ])
      .then(()=>{
        expect(true).toBeTruthy()
      })
  })
})

describe('generateImportCode', ()=>{
  it('returns js code', () => {
    const json = toJSON(proto)
    const services = getServices(json)
    const actions = getActions(services, 'helloworld')
    const protos = _.chain([{ actions }, { actions }])
      .map('actions')
      .map((actions)=>({
        protoName: actions[0].protoName,
        client: actions[0].client,
      }))
      .value()
    const code = generateImportCode(protos, 'http://localhost:8080')
    expect(code).toBe(
`import GRPC from './grpc'
import { createRequest } from './request'
import { GreeterPromiseClient } from './helloworld_grpc_web_pb'
import helloworld from './helloworld_pb'
import { GreeterPromiseClient } from './helloworld_grpc_web_pb'
import helloworld from './helloworld_pb'`
    )
  })
})

describe('generateMutationTypesCode', ()=>{
  it('returns js code', () => {
    const json = toJSON(proto)
    const services = getServices(json)
    const mutationTypes = getMutationTypes(services)
    const code = generateMutationTypesCode(mutationTypes)
    expect(code).toBe(
`export const types = {
  GREETER_SAYHELLO: 'GREETER_SAYHELLO',
}`
    )
  })
})

describe('generateInitGrpcCode', ()=>{
  it('returns js code', () => {
    const endpoint = 'http://localhost:8080/'
    const code = generateInitGrpcCode(endpoint)
    expect(code).toBe(`export const grpc = new GRPC('${endpoint}')`)
  })
})

describe('generateRequestCode', ()=>{
  it('returns js code', () => {
    const code = generateRequestCode('helloworld', 'HelloRequest', {users: 'User'})
    expect(code).toBe(`const req = createRequest(params, helloworld.HelloRequest, {users:helloworld.User})`)
  })
})

describe('generateActionsCode', ()=>{
  it('returns js code', () => {
    const json = toJSON(proto)
    const services = getServices(json)
    const messages = getMessages(json)
    const models = getModels(messages)
    const actions = getActions(services, 'helloworld')
    const param = {
      actions,
      models,
    }
    const code = generateActionsCode([param, param])
    expect(code).toBe(
`export function sayHello (params, options) {
  const req = createRequest(params, helloworld.HelloRequest, {users:helloworld.User})
  return grpc.call({
      client: GreeterPromiseClient,
      method: 'sayHello',
      req,
    })
    .then((res)=>{
      res = res.toObject()
      if (options && options.hasMutation) context.commit(types.GREETER_SAYHELLO, res)
      return res
    })
}
export function sayHello (params, options) {
  const req = createRequest(params, helloworld.HelloRequest, {users:helloworld.User})
  return grpc.call({
      client: GreeterPromiseClient,
      method: 'sayHello',
      req,
    })
    .then((res)=>{
      res = res.toObject()
      if (options && options.hasMutation) context.commit(types.GREETER_SAYHELLO, res)
      return res
    })
}`
    )
  })
})

describe('generateCode', ()=>{
  const protoFilePath = './test/grpc/helloworld.proto'
  const protoName =  path.basename(protoFilePath, '.proto')
  beforeAll(()=>{
    return generateFileByProtoc(protoFilePath)
  })
  it('returns js code', () => {
    const json = toJSON(proto)
    const services = getServices(json)
    const messages = getMessages(json)
    const models = getModels(messages)
    const mutationTypes = getMutationTypes(services)
    const actions = getActions(services, protoName)
    const param = {
      mutationTypes,
      actions,
      models,
    }
    const code = generateCode([param, param], 'http://localhost:8080/')
    expect(_.isString(code)).toBeTruthy()
    expect(code).toBe(
`import GRPC from './grpc'
import { createRequest } from './request'
import { GreeterPromiseClient } from './helloworld_grpc_web_pb'
import helloworld from './helloworld_pb'
import { GreeterPromiseClient } from './helloworld_grpc_web_pb'
import helloworld from './helloworld_pb'

export const types = {
  GREETER_SAYHELLO: 'GREETER_SAYHELLO',
  GREETER_SAYHELLO: 'GREETER_SAYHELLO',
}

export const grpc = new GRPC('http://localhost:8080/')
export function sayHello (params, options) {
  const req = createRequest(params, helloworld.HelloRequest, {users:helloworld.User})
  return grpc.call({
      client: GreeterPromiseClient,
      method: 'sayHello',
      req,
    })
    .then((res)=>{
      res = res.toObject()
      if (options && options.hasMutation) context.commit(types.GREETER_SAYHELLO, res)
      return res
    })
}
export function sayHello (params, options) {
  const req = createRequest(params, helloworld.HelloRequest, {users:helloworld.User})
  return grpc.call({
      client: GreeterPromiseClient,
      method: 'sayHello',
      req,
    })
    .then((res)=>{
      res = res.toObject()
      if (options && options.hasMutation) context.commit(types.GREETER_SAYHELLO, res)
      return res
    })
}
`
    )
  })
})

describe('generateDtsCode', ()=>{
  it('returns js code', () => {
    const json = toJSON(proto)
    const services = getServices(json)
    const messages = getMessages(json)
    const actions = getActions(services)
    expect(generateDtsCode([{ messages, actions }])).toBe(
`interface User {
  name?:string;
  age?:number;
  children?:string[];
}
interface HelloRequest {
  users?:User[];
}
interface HelloReply {
  users?:User[];
}
export function sayHello(param:HelloRequest):Promise<HelloReply>;`)
  })
  it('returns multiple js code', () => {
    const json = toJSON(proto)
    const services = getServices(json)
    const messages = getMessages(json)
    const actions = getActions(services)
    expect(generateDtsCode([{ messages, actions }, { messages, actions }])).toBe(
`interface User {
  name?:string;
  age?:number;
  children?:string[];
}
interface HelloRequest {
  users?:User[];
}
interface HelloReply {
  users?:User[];
}
export function sayHello(param:HelloRequest):Promise<HelloReply>;

interface User {
  name?:string;
  age?:number;
  children?:string[];
}
interface HelloRequest {
  users?:User[];
}
interface HelloReply {
  users?:User[];
}
export function sayHello(param:HelloRequest):Promise<HelloReply>;`
    )
  })
})
